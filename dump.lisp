(file_scope (len 2) (mod_def (id A) (block (len 4) (fn_def (id increment) (invalid ) (invalid ) (block (len 1) (assign_add_stmt (select (id B) (id a)) (int 1))) (arg len 0) )(fn_def (id map) (?expr (id U)) (clauses (len 3) (clause (id T) (invalid ) (invalid ))(clause (id U) (invalid ) (invalid ))(requires_predicate (call (id is_debug_mode)(len 0) ))) (block (len 1) (if_is_match_stmt (id monad) (branches (len 2) (pattern_branch (id? (id some)) (expr_stmt (call (id f)(len 1) (id some))))(pattern_branch (null ) (expr_stmt (null )))))) (arg len 2) (pattern : expr (id monad) (?expr (id T)))(pattern : expr (id f) (fn_def (invalid ) (id U) (invalid ) (invalid ) (arg len 1) (id T))))(effect_def (id Yield) (id T) (clauses (len 1) (clause (id T) (invalid ) (invalid ))) (invalid ) (arg len 0) )(expr_stmt (invalid ))))(mod_def (id B) (block (len 3) (let_decl (id a) (id usize) (int 0))(const_decl (id N) (invalid ) (int 23))(mod_def (id C) (block (len 2) (mod_def (id D) (block (len 1) (mod_def (id E) (block (len 3) (const_decl (id len) (invalid ) (int 100))(const_decl (id N) (invalid ) (id len))(mod_def (id H) (block (len 0) ))))))(mod_def (id Well) (block (len 0) )))))))